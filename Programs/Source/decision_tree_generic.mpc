'''
0																	0

1									1																2

2					3								4								5								6

3			7				8				9				10				11				12				13				14

4		15		16		17		18		19		20		21		22		23		24		25		26		27		28		29		30

0:0			2^L-1	..	2^(L+1)-2
1:1-2		2^L-1	.. 	2^(L+1)-2
2:3-6		2^L-1	.. 	2^(L+1)-2
3:7-14		2^L-1	.. 	2^(L+1)-2
4:15-30		2^L-1	.. 	2^(L+1)-2

LTE = 2*n+1
GT = 2*n+2

'''

##############################################################################################
# Definition of the number of trees, the depth of a tree and the feature set size

tree_num = 32
layers_num = 4                          #!the leaves (values) layer is not included

nodes_count = 2 ** layers_num - 1
value_count = nodes_count + 1

features_set_size = 48                  #!the number of features must be >= the nodes_count

##############################################################################################
# Reading feature set from user 1 (the evaluee)

#print_ln('user 1: please enter feature set offset value (will be deducted from all feature values):')
feature_set_offset = sint.get_input_from(1)

#print_ln('user 1: please enter feature set (%s feature values):', features_set_size)
features_set = Array(features_set_size, sint)
@for_range(features_set_size)
def init_features_set(i):
    features_set[i] = sint.get_input_from(1)
    features_set[i] = features_set[i] - feature_set_offset
    #debug-print
    #print_ln('feature_set[%s] = %s', i, features_set[i].reveal())

##############################################################################################
# Read tree data function

def read_tree_data():
    feature_idxs = Array(nodes_count, sint)
    #print_ln('user 0: please enter node-feature-indices (%s of them are expected):', nodes_count)
    @for_range(nodes_count)
    def init_feature_idxs(i):
        feature_idxs[i] = sint.get_input_from(0)

    #print_ln('user 0: please enter node-threshold-offset (will be deducted from all node-threshold values):')
    node_threshold_offset = sint.get_input_from(0)

    thresholds = Array(nodes_count, sint)
    #print_ln('user 0: please enter node-thresholds (%s of them are expected):', nodes_count)
    @for_range(nodes_count)
    def init_thresholds(i):
        thresholds[i] = sint.get_input_from(0)
        thresholds[i] = thresholds[i] - node_threshold_offset

    #print_ln('user 0: please enter leaf offset (will be deducted from all leaf values):')
    leaf_offset = sint.get_input_from(0)

    values = Array(value_count, sint)
    #print_ln('user 0: please enter leaf values (%s of them are expected):', value_count)
    @for_range(value_count)
    def init_values(i):
        values[i] = sint.get_input_from(0)
        values[i] = values[i] - leaf_offset

    return (feature_idxs, thresholds, values)

##############################################################################################
# User features evaluation by tree function

def evaluate_user( tree ):
    node_ptr = sint(0)

    for curr_lyr in range(0, layers_num):
        layer_start_node_idx = (2**curr_lyr)-1
        layer_stop_node_idx = (2**(curr_lyr+1))-1 #!one above the last idx in the layer

        #debug-print
        #print_ln('L%s: %s - %s', curr_lyr, layer_start_node_idx, layer_stop_node_idx)

        layer_feature_idx = sint(0)
        layer_threshold = sint(0)
        for curr_nd in range(layer_start_node_idx, layer_stop_node_idx):
            key = (node_ptr == curr_nd)
            layer_feature_idx = layer_feature_idx + ( key * tree[0][curr_nd] )
            layer_threshold = layer_threshold + ( key * tree[1][curr_nd] )

        layer_feature = sint(0)
        for curr_ft in range(0, features_set_size):
            layer_feature = layer_feature + ( (layer_feature_idx == curr_ft) * features_set[curr_ft] )

        thld_pass = (layer_feature > layer_threshold)
        
        #debug-print
        #print_ln('LFI=%s; LF=%s; LT=%s; PS=%s;', layer_feature_idx.reveal(), layer_feature.reveal(), layer_threshold.reveal(), thld_pass.reveal())

        node_ptr = ( (thld_pass == 1) * (2*node_ptr+2) ) + ( (thld_pass == 0) * (2*node_ptr+1) )

        #debug-print
        #print_ln('next node %s', node_ptr.reveal())
        
    value_idx = node_ptr - nodes_count
    result = sint(0)
    for curr_val_idx in range(0, nodes_count):
        result = result + ( (curr_val_idx == value_idx) * tree[2][curr_val_idx] )

    #print_ln('evaluation result: %s', result.reveal())
    return result

##############################################################################################
# Perform the evaluation for each tree
evaluation_result_set = Array(tree_num, sint)
@for_range(tree_num)
def evaluate(i):
    #print_ln('reading tree %s data', i)
    tree = read_tree_data()
    #print_ln('evaluating user by tree %s', i)
    evaluation_result_set[i] = evaluate_user(tree)
    #debug-print
    #print_ln('tree %s evaluation result = %s', i, evaluation_result_set[i].reveal())
##############################################################################################
# Sum results and open
result_sum = sint(0)
for i in range(0, tree_num):
    result_sum = result_sum + evaluation_result_set[i]
print_ln('result sum = %s', result_sum.reveal())
##############################################################################################
